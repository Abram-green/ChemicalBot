from aiogram import Bot, types
from aiogram.types import InputFile
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from prik import priks

import ast

TOKEN = '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Ç–æ–∫–µ–Ω. –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —É @BotFather'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

button_reference = KeyboardButton('üìï –°–ø—Ä–∞–≤–∫–∞')
keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
keyboard.add(button_reference)

reference = """–°–ø—Ä–∞–≤–∫–∞:
–Ø –ø—Ä–∏–Ω–∏–º–∞—é –æ–±—â–∏–µ (C2H2, C2H5OH, C3H6O) —Ñ–æ—Ä–º—É–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
–†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–∞–∫–∏–µ —Ç–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∫: 
–ê–ª–∫–∞–Ω—ã, 
–¶–∏–∫–ª–æ–∞–ª–∫–∞–Ω—ã,
–ê–ª–∫–µ–Ω—ã, 
–¶–∏–∫–ª–æ–∞–ª–∫–µ–Ω—ã,
–ê–ª–∫–∏–Ω—ã, 
–ê–ª–∫–∞–¥–∏–µ–Ω—ã, 
–ê–ª—å–¥–µ–≥–∏–¥—ã, 
–ö–µ—Ç–æ–Ω—ã, 
1,2,3-–∞—Ç–æ–º–Ω—ã–µ –ø–µ—Ä–≤–∏—á–Ω—ã–µ —Å–ø–∏—Ä—Ç—ã, 
–ö–∞—Ä–±–æ–Ω–æ–≤—ã–µ –∫–∏—Å–ª–æ—Ç—ã. 
"""

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–õ—é–±–ª—é –ø—Ä–∏–∫–æ–ª—ã –≤ —Ö–∏–º–∏–∏")
    await message.answer(reference, reply_markup=keyboard)

@dp.message_handler(commands=['reference'])
async def process_reference_command(message: types.Message):
    await message.answer(reference, reply_markup=keyboard)

@dp.message_handler()
async def on_message(message: types.Message):
    r = priks(message.text)
    if message.text == "üìï –°–ø—Ä–∞–≤–∫–∞":
        await message.answer(reference, reply_markup=keyboard)
    elif type(r) == tuple:
        for i in r:
            await message.reply(i.capitalize())
    elif type(r) == str:
        await message.reply(r.capitalize())
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª—ãüò¢", reply_markup=keyboard   )


if __name__ == '__main__':
    executor.start_polling(dp)